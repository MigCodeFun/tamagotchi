/* 
√âtats de notre Tamastudi possibles :
- ü•ö : partie non lanc√©e
- üê£ : naissance pendant tant qu'il n'a pas fait son 1er caca
Ensuite il devient un "grand" avec une humeur variable
- üò¢ : triste 0/5
- üôÅ : pas content 1/5
- üôÇ : normal 2/5
- üòÑ : content 3/5
- ü§ó : heureux 4/5
- ü•∞ : tr√®s heureux 5/5
- üëª : mort 0/5
Ses envies :
- üòã : faim, al√©atoire minimum 30 sec et max 3 minutes
- ü•± : jouer, al√©atoire minimum 30 sec et max 3 minutes
- üí© : caca, al√©atoire minimum 30 sec et max 1.30 minutes uniquement apr√®s avoir mang√©
*/

const myTama = {
  name: "",
  alive: false,
  fed: 0,
  playfull: 0,
  cleaned: 0,
  lifeDuration: 0,
  desire: ""
};

/* PHASE 0 : activer le tamastudi 
1) Cliquer sur le bouton du milieu
2) Ajouter un compteur qui attend d'avoir une valeur max de 5
3) Alors on fait naitre notre tama
*/
const start = () => {
  // 1) Cliquer sur le bouton du milieu
  const buttonCenter = document.querySelector(
    '.js-button[data-direction="center"]'
  );
  // 2) Ajouter un compteur qui attend d'avoir une valeur max de 5
  let count = 0;
  buttonCenter.addEventListener("click", () => {
    count++;
    if (count === 5) {
      // 3) Alors on fait naitre notre tama
      birth();
    }
  });
};

/* 
PHASE 1 : la naissance de mon tama 
1) demander le nom de mon personnage
2) fait √©clore mon oeuf pour passer au poussin
3) affiche mes vitals
4) affiche le nom de mon tama dans les vitals
5) mettre les scores des vitals √† 5
*/

const birth = () => {
  // 1) demander le pr√©nom
  myTama.name = prompt("Quel nom a votre tamastudi ?");
  // 2) fait √©clore mon oeuf pour passer au poussin
  showInScreen("üê£");
  // 3) affiche mes vitals
  const vitals = document.querySelector(".js-vitals");
  vitals.classList.remove("hidden");
  // 4) affiche le nom de mon tama dans les vitals
  const nameDisplay = document.querySelector(".js-tamaName");
  nameDisplay.textContent = myTama.name;
  // 5) mettre les scores des vitals √† 5
  const defaultScore = 1;
  myTama.fed = defaultScore;
  myTama.playfull = defaultScore;
  myTama.cleaned = defaultScore;
  updateVitals()
  // 6) afficher les actions
  const actions = document.querySelector(".js-actions");
  actions.classList.remove("hidden");
  // 7) appel de la fonction pour le faire "grandir"
  evolve();
  // 8) Calcule de la dur√©e de vie
  myTama.alive = true
  calcLifeDuration();
};

/* PHASE 2 : l'√©volution de mon tama
1) Attendre que notre tamaStudi ait une "premi√®re envie"
2) Il devient grand
*/
const evolve = () => {
  // 1) Attendre que notre tamaStudi ait une "premi√®re envie"
  const functionToExecute = () => {
    mood();
    cycleOfAdultLife()
  };
  wantsTo(functionToExecute);
};

/* LES ENVIES : 
Fonction pour g√©rer 
- üòã : faim, al√©atoire minimum 30 sec et max 3 minutes
- ü•± : jouer, al√©atoire minimum 30 sec et max 3 minutes
- üí© : caca, al√©atoire minimum 30 sec et max 3 minutes uniquement apr√®s avoir mang√©
1) Cr√©er une fonction qu'on va pouvoir appeler plus tard dans notre code
2) Stocker les envies de mon tama dans une variable
3) Avec un setTimeout choisir une envie al√©atoire
4) La dur√©e du setTimeout est dynamique est comprise entre une valeur max et une valeur min
5) Afficher l'envie du tama sur notre √©cran 
6) L'envie de faire caca ne peut √™tre faite que s'il a d√©j√† mang√©
*/
const wantsTo = (callback) => {
  const needs = ["üòã", "ü•±", "üí©"];
  const minDuration = 1000;
  const maxDuration = 3000;
  const duration = getRandomInt({
    min: minDuration,
    max: maxDuration,
  });
  setTimeout(() => {
    const randomIndexNeeds = getRandomInt({
      max: needs.length,
    });
    const desire = needs[randomIndexNeeds];
    if (callback) {
      callback(desire);
    } else {
      showInScreen(desire, true);
    }
  }, duration);
};

/* HUMEUR  G√âN√âRALE :
Une fonction qui calcule la moyenne des 3 indicateurs faim, ennui, prorp√©t√© de notre Tama.
Et elle affiche cette moyenne dans les vitals
*/
const mood = () => {
  // Partie 1 : affichage num√©rique
  const sum = myTama.fed + myTama.playfull + myTama.cleaned;
  const average = sum / 3;
  const rounded = Math.round(average);
  const displayMood = document.querySelector(".js-mood");
  displayMood.textContent = rounded;
  // Partie 2 : affichage visuel
  const listOfEmojis = ["üò¢", "üôÅ", "üôÇ", "üòÑ", "ü§ó", "ü•∞"];
  showInScreen(listOfEmojis[rounded]);
  // Partie 3 : est-ce qu'il est mort ? 
  if (rounded === 0) {
    myTama.alive = false
  }
};

/* DUR√âE DE VIE :
Une fonction qui toutes les minutes met √† jour la dur√©e de vie du Tama
*/
const calcLifeDuration = () => {
  const duration = 60_000; // 60 secondes
  const displayLifeDuration = document.querySelector(".js-life-duration");
  setInterval(() => {
    myTama.lifeDuration++;
    displayLifeDuration.textContent = myTama.lifeDuration;
  }, duration);
};


/* GESTION DE VIE "ADULTE"
- Notre Tama a une humeur g√©n√©rale
- Cette humeur est le moyenne de 3 indicateurs
=> mood()
- Ces indicateurs √©voluent avec le temps
=> √Ä FAIRE
- De temps en temps notre Tama a une "envie"
=> wantsTo()
- Si on ne r√©ponds pas √† cette envie dans les temps
- L'indicateur associ√© diminue
- Si on r√©pond dans le temps
- L'indicateur augmente
=> √Ä FAIRE
- Et √ßa continue jusqu'√† que notre Tama meurt
=> √Ä FAIRE
*/
const cycleOfAdultLife = () => {
  if (myTama.alive) {
      // 1) Les indicateurs √©voluent avec le temps
      // De temps en temps notre Tama a une "envie"
      const functionToExecute = (desire) => {
        showInScreen(desire, true)
        myTama.desire = desire
      waitForAction()
    }
    wantsTo(functionToExecute)
  } else {
    showInScreen("üëª")
  }
}

let timeoutWaitForAction = null
const waitForAction = () => {
  timeoutWaitForAction = setTimeout(() => {
    manageIndicators(myTama.desire, false)
    showInScreen("", true)
    cycleOfAdultLife()
  }, 5000)
}

const buttonsAction = document.querySelectorAll('.js-button-action')
buttonsAction.forEach(button => {
  button.addEventListener('click', () => {
    const associateDesire = button.getAttribute('data-desire')
    const tamaDesireString = translateEmoji(myTama.desire)
    const isGoodButton = tamaDesireString === associateDesire
    if (isGoodButton) {
      clearTimeout(timeoutWaitForAction)
      manageIndicators(myTama.desire, isGoodButton)
      cycleOfAdultLife()
    }
  })
});

const translateEmoji = (emoji) => {
  let word = ''
  if (emoji === 'üòã') word = 'eat'
  else if (emoji === 'ü•±') word = 'play'
  else if (emoji === 'üí©') word = 'clean'
  return word
}

const manageIndicators = (desire, hasSucceeded) => {
  // ["üòã", "ü•±", "üí©"]
  const numberToAdd = hasSucceeded ? 1 : -1
  const calculName = hasSucceeded ? 'addition' : 'substraction'
  if (desire === 'üòã' && verifyIndicatorBeforeCalcul(myTama.fed, calculName)) {
    myTama.fed += numberToAdd
  } 
  else if (desire === 'ü•±' && verifyIndicatorBeforeCalcul(myTama.playfull, calculName)) {
    myTama.playfull += numberToAdd
  } 
  else if (desire === 'üí©' && verifyIndicatorBeforeCalcul(myTama.cleaned, calculName)) {
    myTama.cleaned += numberToAdd
  }
  updateVitals()
  mood()
  if (hasSucceeded) {
    showInScreen("", true)
  }
}

const verifyIndicatorBeforeCalcul = (value, calcul) => {
  // V√©rifier si l'indicateur peut √™tre incr√©menter ou d√©cr√©menter
  if (calcul === 'addition') {
    return value < 5
  }
  else {
    return value > 0
  }
}

const updateVitals = () => {
  // Affiche dans les vitals la valeur des 3 indicateurs
  const displayIndicatorEat = document.querySelector('.js-score--eat')
  displayIndicatorEat.textContent = myTama.fed
  const displayIndicatorPlay = document.querySelector('.js-score--play')
  displayIndicatorPlay.textContent = myTama.playfull
  const displayIndicatorClean = document.querySelector('.js-score--clean')
  displayIndicatorClean.textContent = myTama.cleaned
}

/* Fonction du retourne un nombre al√©atoire compris entre un min et max */
const getRandomInt = (props) => {
  const max = props.max;
  // Ternaire = condition "raccourcie" = condition ? valeur si oui : valeur si non
  const min = props.min ? props.min : 0;
  return Math.floor(Math.random() * (max - min) + min);
};

/* Fonction qui g√®re l'affichage des emoticones dans l'√©cran du tama */
const character = document.querySelector('.js-character');
const desire = document.querySelector('.js-desire');
const showInScreen = (display, isDesire) => {
  if(isDesire) {
    desire.textContent = display;
  } else {
    character.textContent = display;
  }
};

// Lance la fonction de "d√©but de mon Tama"
start();